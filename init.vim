
" --- –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ---
syntax on
set relativenumber     " –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
set number
set tabstop=4
set shiftwidth=4
set expandtab
set encoding=utf-8
set hidden
set updatetime=300
set signcolumn=yes
set shell=zsh
set shellcmdflag=-i
set shellquote=
set shellxquote=
set termguicolors


" --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ --- "
let mapleader = "\\"

" –≤–µ—Ä–Ω—É—Ç—Å—è –Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –æ–∫–Ω–æ –ø–æ \d
nnoremap <Leader>d :Dashboard<CR>

" –æ—Ç–∫—Ä—ã—Ç—å —Ç–µ—Ä–º–∏–Ω–∞–ª \t
nnoremap <Leader>t :lua OpenTerminalTab()<CR>

" –Ω–æ–≤—ã–π —Ç–∞–± –Ω–∞ \s
"nnoremap <Leader>s :lua require('telescope.builtin').find_files()<CR>
nnoremap <Leader>s :lua OpenSearchTab()<CR>

" \q: –∑–∞–∫—Ä—ã—Ç—å —Ç–µ–∫—É—â–∏–π —Ç–∞–±
nnoremap <Leader>q :tabclose<CR>

" Ctrl+Tab: –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ç–∞–± –∏–∑ –ª—é–±–æ–≥–æ —Ä–µ–∂–∏–º–∞ (–≤ —Ç–æ–º —á–∏—Å–ª–µ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞)
tnoremap <A-BS> <C-\><C-n>:tabnext<CR>
nnoremap <A-BS> :tabnext<CR>
inoremap <A-BS> <Esc>:tabnext<CR>
vnoremap <A-BS> <Esc>:tabnext<CR>

tnoremap <C-BS> <C-\><C-n>:tabnext<CR>
nnoremap <C-BS> :tabnext<CR>
inoremap <C-BS> <Esc>:tabnext<CR>
vnoremap <C-BS> <Esc>:tabnext<CR>

" Ctrl+Shift+Tab: –ø–µ—Ä–µ—Ö–æ–¥ –≤ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–±
tnoremap <C-SPACE> <C-\><C-n>:tabprevious<CR>
nnoremap <C-SPACE> :tabprevious<CR>
inoremap <C-SPACE> <Esc>:tabprevious<CR>
vnoremap <C-SPACE> <Esc>:tabprevious<CR>

" –ö–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–µ –ø–æ –Ω–∞–∂–∞—Ç–∏—é /
xnoremap / :Commentary<CR>

" –°–¥–≤–∏–≥–∞—Ç—å –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–µ –≤–ª–µ–≤–æ/–≤–ø—Ä–∞–≤–æ —Å –ø–æ–º–æ—â—å—é Tab –∏ Shift+Tab
vnoremap <Tab> >gv
vnoremap <S-Tab> <gv


xnoremap <leader>r :<C-u>call ReplaceSelectedText()<CR>

" –¢–µ—Ä–º–∏–Ω–∞–ª: –≤—ã—Ö–æ–¥ –ø–æ <Esc>
tnoremap <Esc> <C-\><C-n>





" --- –ü–ª–∞–≥–∏–Ω—ã ---
call plug#begin('~/.vim/plugged')
Plug 'mattn/emmet-vim'
Plug 'nvim-lua/plenary.nvim'
Plug 'nvim-telescope/telescope.nvim'
Plug 'nvimdev/dashboard-nvim'
Plug 'nvim-tree/nvim-web-devicons'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'windwp/nvim-autopairs'
Plug 'tpope/vim-commentary'
" —Ü–≤–µ—Ç–æ–≤—ã–µ —Å—Ö–µ–º—ã
Plug 'srcery-colors/srcery-vim'
Plug 'lunarvim/horizon.nvim'
Plug 'arzg/vim-colors-xcode'
Plug 'joshdick/onedark.vim'
Plug 'bcicen/vim-vice'

call plug#end()



" --- –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞ ---
colorscheme srcery
" colorscheme horizon
" colorscheme xcodedark
" colorscheme onedark
"colorscheme vice

" " –°–¥–µ–ª–∞—Ç—å –ø–æ–¥—Å–≤–µ—Ç–∫—É Visual –º–µ–Ω–µ–µ —è—Ä–∫–æ–π
" highlight Visual ctermbg=8 guibg=#3e4451





function! ReplaceSelectedText()
  " –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ä–µ–≥–∏—Å—Ç—Ä s
  normal! gv"sy

  " –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞
  let l:old = getreg("s")

  " –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–¥–µ–ª–µ–Ω–æ ‚Äî –≤—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫—É
  if empty(l:old)
    echoerr "–û—à–∏–±–∫–∞: –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–¥–µ–ª–µ–Ω–æ"
    return
  endif

  " –ó–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–º–µ–Ω—É
  let l:new = input('–ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞: ')

  " –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
  let l:old_escaped = escape(l:old, '/\.*$^~[]')

  " –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–º–µ–Ω—É –ø–æ –≤—Å–µ–º—É –±—É—Ñ–µ—Ä—É
  execute '%s/' . l:old_escaped . '/' . l:new . '/g'
endfunction

" --- airline ---
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#formatter = 'default'
let g:airline#extensions#tabline#fnamemod = ':t'

" –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–±–æ–≤
let g:airline#extensions#tabline#formatter = 'unique_tail'
let g:airline#extensions#tabline#show_tab_nr = 0
let g:airline#extensions#tabline#tab_nr_type = 0

let g:airline#extensions#tabline#formatter = 'custom'

" –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ Airline Tabline –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è —Ç–∞–±–∞
autocmd TabClosed * if exists('*AirlineRefresh') | call AirlineRefresh() | endif
autocmd TabEnter * if exists('*AirlineRefresh') | call AirlineRefresh() | endif


" –Ω–∞–¥–æ —á—Ç–æ–±—ã –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É —Å –¥–≤—É–º—è airline
autocmd BufEnter * if exists('*AirlineRefresh') | call airline#extensions#tabline#init() | call AirlineRefresh() | endif

" –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∏–∂–Ω–µ–π –ø–æ–ª–æ—Å–∫–∏
" –ö–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è –ø—Ä–∞–≤–æ–π —á–∞—Å—Ç–∏ airline
function! MyCleanAirlineRight()
  let l:line = line('.')
  let l:total = line('$')
  let l:raw_line = getline('.')
  let l:charcount = strlen(substitute(l:raw_line, '\s\+', '', 'g')) " –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤
  return printf('%3d%% | %d/%d | %d', l:line * 100 / l:total, l:line, l:total, l:charcount)
endfunction

let g:airline_section_z = '%{MyCleanAirlineRight()}'

" —É–±—Ä–∞—Ç—å –ª–∏—à–Ω–µ–µ
let g:airline_section_y = ''
let g:airline_section_warning = ''
let g:airline_section_error = ''
let g:airline_section_info = ''
let g:airline_section_x = ''
let g:airline_section_y = ''


" --- –û—Ç–∫—Ä—ã–≤–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Ñ–∞–π–ª–∞ (–µ—Å–ª–∏ —Ñ–∞–π–ª –µ—Å—Ç—å) ---
autocmd VimEnter * call SetupTabs()

" ‚Äî‚Äî‚Äî –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ‚Äî‚Äî‚Äî
function! Log(msg)
  let l:logfile = expand('~/nvim_startup.log')
  call writefile([strftime("%Y-%m-%d %H:%M:%S") . ' ' . a:msg], l:logfile, 'a')
endfunction


" --- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å —Ç–µ—Ä–º–∏–Ω–∞–ª + —Ñ–∞–π–ª –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ nvim ---

function! SetupTabs()
  if exists('g:term_tabnr') | return | endif
  tabnew | term
  let g:term_tabnr = tabpagenr()
endfunction

function! SetupTermDir()
  execute g:term_tabnr . 'tabnext'
  if exists('b:terminal_job_id')
    call chansend(b:terminal_job_id, "cd " . fnameescape(g:start_dir) . "\n")
  endif
  tabnext
endfunction

" –ö–æ–≥–¥–∞ —Ñ–∞–π–ª –æ—Ç–∫—Ä—ã—Ç –≤—Ä—É—á–Ω—É—é ‚Äî —Ç–æ–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–º cd –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª
function! SwitchTermDirOnFileOpen()
  if &buftype != '' | return | endif
  if !exists('g:term_tabnr') | return | endif

  let l:dir = expand('%:p:h')
  let g:start_dir = l:dir

  " –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω—ã–π —Ç–∞–±
  execute g:term_tabnr . 'tabnext'

  " –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É cd –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª
  if exists('b:terminal_job_id')
    call chansend(b:terminal_job_id, "cd " . fnameescape(l:dir) . "\n")
  endif

  " –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–∑–∞–¥
  tabnext
endfunction

function! ConditionalStartupTabs()
  if argc() == 0
    " –Ω–∏–∫–∞–∫–∏—Ö —Ç–∞–±–æ–≤ ‚Äî –ø—É—Å—Ç—å dashboard –ø–æ–∫–∞–∂–µ—Ç—Å—è —Å–∞–º
    return
  endif

  " –∏–Ω–∞—á–µ ‚Äî –∑–∞–ø—É—â–µ–Ω —Å —Ñ–∞–π–ª–æ–º, –¥–µ–ª–∞–µ–º –≤—Å—ë –∫–∞–∫ —Ç—ã —Ö–æ—á–µ—à—å
  call SetupTabs()
endfunction


autocmd VimEnter * if argc() != 0 | call SetupTabs() | endif


" –¢—Ä–∏–≥–≥–µ—Ä—ã
autocmd VimEnter * call ConditionalStartupTabs()
autocmd BufReadPost * call SwitchTermDirOnFileOpen()


let g:term_tabnr = tabpagenr()



tnoremap <Esc> <C-\><C-n>

" --- –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ---
autocmd BufWritePre * silent! call mkdir(expand('%:p:h'), 'p')


" --- –£–±–∏–≤–∞–µ–º –≤—Å–µ –æ–∫–Ω–∞ –ø–æ :q –∏–ª–∏ :wq ---
command! Q tabdo q! | redraw!
command! WQ wall | tabdo q! | redraw!

cnoreabbrev q Q
cnoreabbrev wq WQ


" –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å airline –¥–∞–∂–µ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ
let g:airline#extensions#term#enabled = 1

" –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é, –Ω–æ –Ω–∞–¥–æ
set laststatus=3

" –æ—Ç–∫–ª—é—á–∞–µ—Ç –∞–≤—Ç–æ –∫–æ–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –Ω–æ–≤—ã—Ö —Å—Ç—Ä–æ–∫ –ø–æ—Å–ª–µ –∫–æ–º–µ–Ω—Ç–∞—Ä—è 
autocmd FileType * setlocal formatoptions-=cro

" –í—Å—Ç–∞–≤–∫–∞: –æ—Ç–∫–ª—é—á–∏—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—É—é –Ω—É–º–µ—Ä–∞—Ü–∏—é
autocmd InsertEnter * set norelativenumber

" –í—ã—Ö–æ–¥ –∏–∑ –≤—Å—Ç–∞–≤–∫–∏: —Å–Ω–æ–≤–∞ –≤–∫–ª—é—á–∏—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—É—é
autocmd InsertLeave * set relativenumber

" –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ 
set updatetime=300
autocmd InsertLeave,TextChanged,TextChangedI * silent! wall


" —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –æ–∫–Ω–æ
lua << EOF
require("dashboard").setup({
  theme = "hyper",
  config = {
    header = {
"----------------------------------",
"                 ÔºèÔºû'''„Éï        ",
"                 |  _„ÄÄ_|         ",
"              Ôºè` „ÉüÔºøx„Éé         ",
"             /„ÄÄ„ÄÄ     |          ",
"            /„ÄÄ „ÉΩ„ÄÄ„ÄÄ Ôæâ          ",
"            ‚îÇ„ÄÄ„ÄÄ|„ÄÄ|„ÄÄ|          ",
"       ÔºèÔø£|„ÄÄ„ÄÄ |„ÄÄ|„ÄÄ|          ",
"       (Ôø£„ÉΩÔºø___„ÉΩ_)__)          ",
"       Ôºº‰∫å)‚Ñíùì∏ùìøùíÜ ùîÇùì∏ùìæ              ",
"----------------------------------",
    },
    shortcut = {
      {
        desc = "ÔÉ∂ Files",
        group = "Label",
        action = "Telescope find_files",
        key = "f",
      },
      {
        desc = "Ôúô Recents",
        group = "Label",
        action = "Telescope oldfiles",
        key = "r",
      },
      {
        desc = "ÔÄì Config",
        group = "Label",
        action = "edit ~/.config/nvim/init.vim",
        key = "c",
      },
    },
    footer = { "" },
  },
})
EOF

" –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–µ —Ñ–∞–π–ª—ã
lua << EOF
require('telescope').setup({
  defaults = {
    find_command = {
      "fd",
      "--type", "f",
      "--hidden",
      "--exclude", ".git",
      "--exclude", "node_modules",
      "--exclude", "venv",
      "--exclude", "build",
      "--exclude", "*.o",
      "--exclude", "*.so",
      "--exclude", "*.exe",
      "--exclude", "*.dll",
      "--exclude", "*.bin",
      "--exclude", "*.class",
      "--exclude", "*.pyc",
      "--exclude", "*.jpg",
      "--exclude", "*.jpeg",
      "--exclude", "*.png",
      "--exclude", "*.gif",
      "--exclude", "*.ttf",
      "--exclude", "*.woff",
      "--exclude", "*.zip",
      "--exclude", "*.tar",
      "--exclude", "*.pdf",
      "--exclude", "*.mp3",
      "--exclude", "*.mp4",
      "--exclude", "*.avi",
      "--exclude", "*.ico",
    }
  }
})
EOF

" ---- –∞–≤—Ç–æ —Å–∫–æ–±–∫–∏ ----
lua << EOF
require("nvim-autopairs").setup {}
EOF


function! SwitchTermToFileDir()
  let l:dir = expand('%:p:h')
  if &buftype == 'terminal' && exists('b:terminal_job_id')
    execute 'lcd' fnameescape(l:dir)
    call chansend(b:terminal_job_id, "cd " . l:dir . "\n")
  endif
endfunction


" –ü—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ª—é–±–æ–≥–æ —Ñ–∞–π–ª–∞ –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
autocmd BufReadPost * call SwitchTermToFileDir()

" –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ coc "
inoremap <silent><expr> <CR> pumvisible()
  \ ? coc#_select_confirm()
  \ : "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" new —Ç–∞–±
lua << EOF
function OpenSearchTab()
  local api = vim.api

  -- –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ç–µ—Ä–º–∏–Ω–∞–ª —Å–æ–∑–¥–∞–Ω
  if vim.g.term_tabnr == nil then
    vim.cmd("tabnew | term")
    vim.g.term_tabnr = api.nvim_get_current_tabpage()
  end

  -- –°–æ–∑–¥–∞—ë–º —Ç–∞–± –ø–µ—Ä–µ–¥ —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–º
  local term_tab = vim.g.term_tabnr
  vim.cmd((term_tab) .. "tabnew")

  -- –ó–∞–ø—É—Å–∫–∞–µ–º Telescope
  require('telescope.builtin').find_files()
end
EOF


lua << EOF
function OpenTerminalTab()
  local dir = vim.fn.expand('%:p:h')
  vim.cmd("tablast | tabnew | term")
  vim.g.term_tabnr = vim.api.nvim_get_current_tabpage()
  if vim.b.terminal_job_id then
    vim.fn.chansend(vim.b.terminal_job_id, "cd " .. dir .. "\n")
  end
end
EOF


lua << EOF
function OpenSearchTab()
  local api = vim.api
  local tab_count = api.nvim_list_tabpages()

  -- –ï—Å–ª–∏ —Ç–µ—Ä–º –≤–∫–ª–∞–¥–∫–∞ –Ω–µ –≤–∞–ª–∏–¥–Ω–∞, –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º
  if vim.g.term_tabnr == nil or vim.g.term_tabnr > #tab_count then
    vim.cmd("tabnew | term")
    vim.g.term_tabnr = api.nvim_get_current_tabpage()
  end

  -- –°–æ–∑–¥–∞–µ–º —Ç–∞–± –ø–µ—Ä–µ–¥ —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–º
  local term_tab = vim.g.term_tabnr
  api.nvim_set_current_tabpage(term_tab)
  vim.cmd("tabnew")

  -- –ó–∞–ø—É—Å–∫–∞–µ–º Telescope
  require('telescope.builtin').find_files()
end
EOF
